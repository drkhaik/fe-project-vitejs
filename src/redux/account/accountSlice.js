import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { fetchCount } from './counterAPI';
import { fetchUserAccountAPI, handleLogout } from '../../services/api';

const initialState = {
  isAuthenticated: false,
  isLoading: true,
  token: "",
  user: {
    id: "",
    email: "",
    fullName: "",
    roleId: "",
    role: ""
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const handleLogoutReduxThunk = createAsyncThunk(
  'authentication/logoutAction',
  async () => {
    const response = await handleLogout();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchUserAccountReduxThunk = createAsyncThunk(
  'account/fetchUserAccount',
  async () => {
    const response = await fetchUserAccountAPI();
    // The value we return becomes the `fulfilled` action payload
    console.log("check response fetchUserAccount", response.data);
    return response.data;
  }
);

export const accountSlice = createSlice({
  name: 'account',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doLoginAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = true;
      state.isLoading = false;
      state.token = action.payload.access_token;
      state.user = action.payload.user;
      // console.log("check payload", action.payload);
    },

    // fetchUserAccountAction: (state, action) => {
    //   state.isAuthenticated = true;
    //   state.isLoading = false;
    //   state.token = action.payload.token;
    //   state.user = action.payload.user;
    // },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    builder
      .addCase(fetchUserAccountReduxThunk.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchUserAccountReduxThunk.fulfilled, (state, action) => {
        state.isAuthenticated = true;
        state.isLoading = false;
        state.token = action.payload.token;
        state.user = action.payload.user;
      })
      .addCase(fetchUserAccountReduxThunk.rejected, (state, action) => {
        state.isAuthenticated = false;
        state.isLoading = false;
        state.token = "";
        state.user = {
          id: "",
          email: "",
          fullName: "",
          roleId: "",
          role: ""
        }
      })

      .addCase(handleLogoutReduxThunk.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(handleLogoutReduxThunk.fulfilled, (state, action) => {
        state.isLoading = false;
        // localStorage.removeItem('access_token');
        state.isAuthenticated = false;
        state.token = "";
        state.user = {
          id: "",
          email: "",
          fullName: "",
          role: "",
          roleId: "",
        }
      });

  },
});

export const { doLoginAction, fetchUserAccount, logoutAction } = accountSlice.actions;

export default accountSlice.reducer;
